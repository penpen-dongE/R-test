partition <- sample(seq(1, 2), size = nrow(data), replace = TRUE, prob = c(0.7, 0.3))
train <- data[partition == 1,]
test <- data[partition == 2,]
nn_tr<- nnet(output~x3+x5+x9+x10+x13+x16+x20+x21+x24, data=train, size =7, abstol=0.1, maxit=1000, reltol =1.0e-8)
pred_train<-predict(nn_tr,train,type=("class"))
str(pred_train)
pred_train <- as.factor(pred_train)
str(pred_train)
table(pred_train)
table(train$output)
confusionMatrix(pred_train,train$output)
library(NeuralNetTools)
neuralweights(nn_tr)
olden(nn_tr)
plotnet(nn_tr)
install.packages("NeuralNetTools")
library(NeuralNetTools)
neuralweights(nn_tr)
olden(nn_tr)
plotnet(nn_tr)
setwd("c:/education/R/workspace")
data<-read.csv("importdata.csv")
set.seed(1234)
partition <- sample(seq(1, 2), size = nrow(data), replace = TRUE, prob = c(0.7, 0.3))
train <- data[partition == 1,]
test <- data[partition == 2,]
nn_tr<- nnet(output~x3+x5+x9+x10+x13+x16+x20+x21+x24, data=train, size =7, abstol=0.1, maxit=1000, reltol =1.0e-8)
pred_train<-predict(nn_tr,train,type=("class"))
pred_train <- as.factor(pred_train)
table(pred_train)
table(train$output)
confusionMatrix(pred_train,train$output)
pred_te<-predict(nn_tr,test,type=("class"))
confusionMatrix(pred_te,test$output)
install.packages("NeuralNetTools")
library(NeuralNetTools)
neuralweights(nn_tr)
olden(nn_tr)
plotnet(nn_tr)
library(neuralnet)
library(nnet)
library(e1071)
library(caret)
setwd("c:/education/R/workspace")
data<-read.csv("importdata.csv")
set.seed(1234)
partition <- sample(seq(1, 2), size = nrow(data), replace = TRUE, prob = c(0.7, 0.3))
train <- data[partition == 1,]
test <- data[partition == 2,]
nn_tr<- nnet(output~x3+x5+x9+x10+x13+x16+x20+x21+x24, data=train, size =7, abstol=0.1, maxit=1000, reltol =1.0e-8)
pred_train<-predict(nn_tr,train,type=("class"))
pred_train <- as.factor(pred_train)
table(pred_train)
table(train$output)
confusionMatrix(pred_train,train$output)
pred_te<-predict(nn_tr,test,type=("class"))
confusionMatrix(pred_te,test$output)
install.packages("NeuralNetTools")
library(NeuralNetTools)
neuralweights(nn_tr)
olden(nn_tr)
plotnet(nn_tr)
install.packages("NeuralNetTools")
str(train)
new_data=data.frame(x3=c(0.82),x5=c(24.788),x10=c(12.786),x13=c(32.12),x16=c(3.7),
x21=c(48.3),x24=c(450.777))
new_data_bankrupt=predict(nn_tr,new_data,type=("class"))
new_data_bankrupt
new_data=data.frame(x3=c(0.72),x5=c(24.788),x9=c(50.12),x10=c(12.786),x13=c(16.12),x16=c(7.1),
x21=c(432.3),x24=c(-2.12))
new_data_bankrupt=predict(nn_tr,new_data,type=("class"))
new_data=data.frame(x3=c(0.72),x5=c(24.788),x9=c(50.12),x10=c(12.786),x13=c(16.12),x16=c(7.1),
x20=c(3.4),x21=c(32.3),x24=c(-2.12))
new_data_bankrupt=predict(nn_tr,new_data,type=("class"))
new_data
new_data_bankrupt
?sample
library(neuralnet)
library(nnet)
library(e1071)
library(caret)
setwd("c:/education/R/workspace")
data<-read.csv("importdata.csv")
set.seed(1234)
partition <- sample(seq(1, 2), size = nrow(data), replace = FALSE, prob = c(0.7, 0.3))
train <- data[partition == 1,]
test <- data[partition == 2,]
partition <- sample(seq(1, 2), size = nrow(data), replace = TRUE, prob = c(0.7, 0.3))
View(partition)
View(train)
View(patition)
View(partition)
View(train)
View(test)
install.packages("neuralnet")
install.packages("nnet")
install.packages("e1071")
install.packages("caret")
library(neuralnet)
library(nnet)
library(e1071)
library(caret)
setwd("c:/education/R/workspace")
data<-read.csv("importdata.csv")
set.seed(1234)
partition <- sample(seq(1, 2), size = nrow(data), replace = TRUE, prob = c(0.7, 0.3))
View(partition)
train <- data[partition == 1,]
View(train)
test <- data[partition == 2,]
View(test)
nn_tr<- nnet(output~x3+x5+x9+x10+x13+x16+x20+x21+x24, data=train, size =7, abstol=0.1, maxit=1000, reltol =1.0e-8)
pred_train<-predict(nn_tr,train,type=("class"))
table(pred_train)
table(train$output)
pred_train <- as.factor(pred_train)
confusionMatrix(pred_train,train$output)
pred_te <- as.factor(pred_te)
pred_te<-predict(nn_tr,test,type=("class"))
confusionMatrix(pred_te,test$output)
pred_te<-predict(nn_tr,test,type=("class"))
pred_te <- as.factor(pred_te)
pred_te<-predict(nn_tr,test,type=("class"))
confusionMatrix(pred_te,test$output)
pred_te<-predict(nn_tr,test,type=("class"))
pred_te <- as.factor(pred_te)
confusionMatrix(pred_te,test$output)
new_data=data.frame(x3=c(0.72),x5=c(24.788),x9=c(50.12),x10=c(12.786),x13=c(16.12),x16=c(7.1),
x20=c(3.4),x21=c(32.3),x24=c(-2.12))
new_data_bankrupt=predict(nn_tr,new_data,type=("class"))
new_data_bankrupt
# 주석입니다.
a <- c(1,2);
a
b <- c(1,2,3,4
,5,6)
s4 = 1-3i
s1 = 10
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
v4 = c(v1,v2)
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
v6 = 5:1
v1 = 2:3
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
v4 = c(v1,v2)
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
V3 = -3.3:5
V4 = 5:-3.3
v1=seq(from=1, to=5, by=1)
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
v2=seq(from=1, to=5, by=0.5)
v3=seq(from=5, to=1, by=-0.5)
source('C:/education/R/workspace/1_day_class.R', encoding = 'UTF-8', echo=TRUE)
v1=sequence(10)
v2 = sequence(5.5)
v3 = sequence(1)
v4 = sequence(0)
v5 = sequence(-3)
#  변수 만들기
x <- c(1, 2, 3)
x
#  함수 적용하기
mean(x)
## [1] 2
max(x)
## [1] 3
min(x)
install.packages("ggplot2")	#  ggplot2  패키지 설치
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
#  빈도 그래프 출력
qplot(x)
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
#  빈도 그래프 출력
qplot(x)
install.packages("ggplot2")	#  ggplot2  패키지 설치
install.packages("ggplot2")
library(ggplot2)	          #  ggplot2  패키지 로드
#  빈도 그래프 출력
qplot(x)
#  빈도 그래프 출력
qplot(x)
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
#  빈도 그래프 출력
qplot(x)
install.packages("ggplot2")	#  ggplot2  패키지 설치
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
#  빈도 그래프 출력
qplot(x)
install.packages("ggplot2")	#  ggplot2  패키지 설치
install.packages("ggplot2")
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
#  빈도 그래프 출력
qplot(x)
install.packages("ggplot2")	#  ggplot2  패키지 설치
install.packages("ggplot2")
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
#  빈도 그래프 출력
qplot(x)
library(readxl)
df_exam <- read_excel("excel_exam.xlsx")
df_exam
mean(df_exam$english)
mean(df_exam$science)
install.packages("ggplot2")	#  ggplot2  패키지 설치
library(ggplot2)	          #  ggplot2  패키지 로드
# <함수 사용하기>
#  여러 문자로 구성된 변수 생성
x <- c("a", "a", "b", "c")
x
#  빈도 그래프 출력
qplot(x)
mean(df_exam$english)
mean(df_exam$science)
View(df_exam)
exam <- read.csv("csv_exam.csv")
exam
head(exam)
head(exam,10)
summary(exam)
mpg <-as.data.frame(mpg)
View(mpg)
tail(exam)
tail(exam, 10)
View(exam)
dim(exam)
str(exam)
summary(exam)
head(mpg)
tail(mpg)
head(mpg)
tail(mpg)
df = data.frame(var1 = c(4,3,8),
var2 = c(2,6,1))
df
df$var_sum <- df$var1 + df$var2
df$var_sum
df
library(dplyr)
install.library(dplyr)
install.library("dplyr")
install.packages("dplyr")
library(dplyr)
exam <- read.csv("csv_exam.csv")
exam
exam %>% filter(class ==1)
mpg$total <- (mpg$cty + mpg$hwy)/2
head(mpg)
summary(mpg$total)
hist(mpg$total)
mpg$test <- ifelse(mpg$total > 20, "pass", "fail")
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg,20)
table(mpg$test)
qplot(mpg$test)
library(ggplot2)
qplot(mpg$test)
head(mpg$test,20)
library(ggplot2)
qplot(mpg$test)
mpg$test
head(mpg, 20)
table(mpg$test)
library(ggplot2)
qplot(mpg$test)
dev.off()
mpg$total <- (mpg$cty + mpg$hwy)/2
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
table(mpg$test)
qplot(mpg$test)
help("dplyr")
library(dplyr)
exam <- read.csv("csv_exam.csv")
view(exam)
setwd("C:/education/R/workspace")
library(dplyr)
exam <- read.csv("csv_exam.csv")
view(exam)
View(exam)
exam %>% filter(class == 1)
exam %>% filter(class != 1)
exam %>% filter(math > 50)
exam %>% filter(english >= 80)
exam %>% filter(class==1 & math >= 50)
exam %>% filter(class == 2 & english >= 80)
exam %>% filter(math >= 90 | english >= 90)
exam %>% filter(english <= 90 | science < 50)
exam %>% filter(class %in% c(1,3,5))
class1 <- exam %>% filter(class == 1)
mean(class1$math)
View(class1)
class2 <- exam %>% filter(class == 2)
exam %>% select(math)
exam %>% select(english)
exam %>% select(class, math, english)
exam %>% select(-math)
exam %>% select(-math, -english)
exam %>% filter(class == 1) %>% select(english)
exam %>%
filter(class == 1) %>%
select(english)
exam %>%
select(id, math) %>%
head(6)
exam %>% arrange(math)
exam %>% arrange(desc(math))
exam %>% arrange(class, math)
exam %>%
mutate(total = math + english + science) %>%
head(6)
exam %>%
mutate(total = math + english + science,
mean = (math + english + science)/3 ) %>%
head(5)
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head(5)
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head(5)
exam %>% summarise(mean_math = mean(math))
exam %>% group_by(class) %>%
summarise(mean_math = mean(math))
exam %>% group_by(class) %>%
summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n = n())
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty)) %>%
head(10)
library(qqplot2)
install.packages("ggplot2")
library(qqplot2)
library(ggplot2)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty)) %>%
head(10)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty)) %>%
head(10)
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot = (ctv+hwv)/2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot = (cty+hwv)/2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
mutate(tot = (cty+hwy)/2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
test1 <- data.frame(id = c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
test2 <- data.frame(id = c(1,2,3,4,5),
final = (70,83,65,95,80))
total <- left_join(test1,test2,by = "id")
total
total <- left_join(test1, test2, by = "id")
test2 <- data.frame(id = c(1,2,3,4,5),
final = (70,83,65,95,80))
test2 <- data.frame(id = c(1,2,3,4,5),
final = c(70,83,65,95,80))
total <- left_join(test1, test2, by = "id")
total
name <- data.frame(class = c(1,2,3,4,5),
teacher = c("kim", "lee", "park", "choi", "jung"))
name
data <- read.csv("./data/ch02.csv", header=F, na.strings = c("."))
str(data)
data$V1 <- factor(data$V1, levels = c(1,2),
labels = c("남자", "여자"))
data$V3 <- factor(data$V3, levels=1:14,
labels=c("가구주",  "가구주의 배우자",  "자녀",  "자녀의 배우자",  "가구주의 부모",  "배우자의 부모",  "손자녀, 그 배우자",  "증손자녀, 그 배우자",  "조부모",  "형제자매, 그 배우자",  "형제자매의 자녀, 그 배우자",  "부모의 형제자매, 그 배우자",  "기타 친인척",  "그외같이사는사람") )
data$V4 <- factor(data$V4, levels=1:8,
labels=c("안 받았음", "초등학교", "중학교", "고등학교", "대학-4년제 미만", "대학-4년제 이상", "석사과정", "박사과정") )
str( data )
save.image("data.rda")
head(data)
tail (data)
str( data )
ranicafe <- read.csv("./data/cafedata")
ranicafe <- read.csv("./data/cafedata.csv")
head(ranicafe)
head(ranicafe$Coffees)
table(ranicafe$Coffees)
ranicafe <- read.csv("./data/cafedata.csv", header=T, na.strings="na",
stringsAsFactors=FALSE )
ranicafe <- na.omit(ranicafe)
str(ranicafe)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(ranicafe, aes(Coffees)) +
geom_bar(fill="gray") +
ggtitle("라니의 카페 커피 판매량") +
theme(plot.title = element_text(size = 20, face="bold")) +
xlim(0, 50) + xlab("판매량") +
ylab("횟수") + scale_y_continuous(breaks=0:10)
save.image("data.rda")
head(data)
tail (data)
ranicafe <- read.csv("./data/cafedata.csv")
head(ranicafe)
str(ranicafe)
ggplot(ranicafe, aes(Coffees)) +
geom_bar(fill="gray") +
ggtitle("라니의 카페 커피 판매량") +
theme(plot.title = element_text(size = 20, face="bold")) +
xlim(0, 50) + xlab("판매량") +
ylab("횟수") + scale_y_continuous(breaks=0:10)
library(ggplot2)
ggplot(ranicafe, aes(Coffees)) +
geom_bar(fill="gray") +
ggtitle("라니의 카페 커피 판매량") +
theme(plot.title = element_text(size = 20, face="bold")) +
xlim(0, 50) + xlab("판매량") +
ylab("횟수") + scale_y_continuous(breaks=0:10)
ranicafe <- read.csv("./data/cafedata.csv")
ranicafe <- read.csv("./data/cafedata.csv", header=T, na.strings="na",
stringsAsFactors=FALSE )
ranicafe <- na.omit(ranicafe)
str(ranicafe)
library(ggplot2)
ggplot(ranicafe, aes(Coffees)) +
geom_bar(fill="gray") +
ggtitle("라니의 카페 커피 판매량") +
theme(plot.title = element_text(size = 20, face="bold")) +
xlim(0, 50) + xlab("판매량") +
ylab("횟수") + scale_y_continuous(breaks=0:10)
sort(ranicafe$Coffees)
sort(ranicafe$Coffees)[1]
sort(ranicafe$Coffees, decreasing = True)
sort(ranicafe$Coffees, decreasing = TRUE)
sort(ranicafe$Coffees, decreasing = TRUE)[1]
min(ranicafe$Coffees)
max(ranicafe$Coffees)
rc <- ranicafe$Coffees
stem(rc)
weight <- (1/length(rc))
weight
sum (rc*weight)
rc
length(rc)
sum(rc)
mean(rc)
rc <- c(rc, NA)
tail (rc, n=5)
mean (rc)
mean(rc, na.rm = TRUE)
rc <- ranicafe$Coffees
weight <- (1/length(rc))
sum(rc*weight)
rc[rc ==max(rc)]
max(rc)
max(rc)
rc == max(rc)
rc[rc == max(rc)]
rc[rc == max(rc)] <- 480
mean (rc)
median(rc)
height <- c(164, 166, 168, 170, 172, 174,176)
(height.m <- mean(height))
sum(height.dev)
(height.dev <- height - height.m)
sum(height.dev)
(height.dev2 <- height.dev^2)
sum(height.dev^2)
mean(height.dev^2)
sqrt(mean(height.dev^2))
var(height)
sd(height)
quantile(rc)
(qs <- quantile(rc))
print(qs[4]-qs[2])
IQR(rc)
bp <- boxpolt(rc, main="커피 판매량에 대한
상자도표", axes=F)
